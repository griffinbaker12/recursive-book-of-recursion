Chapter 1 - What is Recusion?
- To become comfortable with recursion, you need to be comfortable with the stack, which controls a program's
flow of execution
- A recursive thing has a self-referential definition
- The program remembers which line of code called the fn and returns to it when the fn finishes execution
- This is handle implicitly with the call stack
- The program's call stack is a stack of frame objects
    - The frame object contains information about a single fn call, including which line of code called the fn
    so the execution when move back there when the fn returns
- In general, these objects contain:
    1) The return address, or the spot in the program where the execution should move when the fn returns
    2) The args passed to the fn call
    3) A set of local variables passed during the fn call
- PLs can have separate local variables with the same name because they are kept in different frame objects
- Every running program has a stack, and multithreaded programs have call stacks for each thread
- Each stack gets allocated a certain memory, and when that is used up, a SO occurs
- All recursive fns require at least one base case and at least one recursive case
- Any code after the recursive case will still run, it just got put on hold 
- Algos that involve tree-like data structures and require backtracking are especially suited for recursion
    - These are 2 areas that I feel like I need more familiarity with
- The call stack is handled implicitly by the program (which is confusing because this is not visible to the programmer)

Chapter 2 - Recursion vs. Iteration
- Any recursive code can be written as an iterative solution with a loop and a stack
- And any iterative loop can be written with a recursive fn
- Recursive fns use a call stack, so an iterative algo can replace this with a stack DS
- Branching points in trees look like roots of a smaller subtree
- You take the problem and break it down into subproblems that are similar to the
original problem, and then a base case is when that problem has been broken down
far enough to have a trivial answer

Chapter 3 - Classical Recursion Problems
- Head-tail technique maps is essentially what we saw with OCaml that 
made recursive problems really elegant in that it destructured the head
and then the rest of the list in the tail on which we made recursive
calculation on
- Head gets combined with the recursively calculated value for the tail
- 3 questions:
    1) What is the base case?
    2) What arguments are passed to the recursive function call?
    3) How do these arguments become closer to the base case?
- If you just make a single pass through the data with no backtracking, that is a good candidate for a loop
- The hanoi problem is a good candidate because it has a tree-like structure where you move from, T -> B, L -> R
in the tree
- The leap of faith is still something that I don't quite get...does it mean that you define the fn in a way
that should work for smaller cases, without "knowing" they will work explicitly? So you just have to define it
in a way that calculates them correctly if it does
    - It is something like if you calculate the smaller cases correctly,
    then the larger cases will also be correct (or so you take the faith)

Chapter 4 - Backtracking 
- A graph is a collection of nodes and edges, and a tree is a kind of graph
- The graph is directed because its edges have one direction: from parent to child node
- Acyclic because there are no loops from child nodes to their own ancestors 
- Linked lists can be considered a sort of tree data structure
- Pre and post order and DFS (go down the child nodes before exploring level)
    - The difference is when the data is accessed: either before or after traversing the node's children
- A simply connected, or perfect maze, is one that has exactly one path between any two points

